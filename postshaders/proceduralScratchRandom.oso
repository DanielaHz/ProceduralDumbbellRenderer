OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: 
shader proceduralScratchRandom
param	float	scale	80		%read{0,18} %write{2147483647,-1}
param	float	thickness	0.00999999978		%read{21,21} %write{2147483647,-1}
param	float	noiseAmount	0.300000012		%read{2147483647,-1} %write{2147483647,-1}
param	float	randomness	1		%read{2,7} %write{2147483647,-1}
param	color	scratchColor	1 1 1		%read{22,22} %write{2147483647,-1}
param	color	baseColor	0.100000001 0.100000001 0.100000001		%read{22,22} %write{2147483647,-1}
oparam	color	result	0 0 0		%read{2147483647,-1} %write{22,22}
global	point	P	%read{0,9} %write{2147483647,-1}
global	float	u	%read{3,3} %write{2147483647,-1}
global	float	v	%read{8,8} %write{2147483647,-1}
local	float	u_random	%read{15,15} %write{3,3}
local	float	v_random	%read{16,16} %write{8,8}
local	float	angle	%read{13,14} %write{12,12}
local	float	cosA	%read{15,15} %write{13,13}
local	float	sinA	%read{16,16} %write{14,14}
local	float	coord	%read{18,18} %write{17,17}
local	float	line	%read{20,20} %write{19,19}
local	float	scratchMask	%read{22,22} %write{21,21}
temp	float	$tmp1	%read{2,2} %write{1,1}
temp	point	$tmp2	%read{1,1} %write{0,0}
temp	float	$tmp3	%read{3,3} %write{2,2}
temp	float	$tmp4	%read{7,7} %write{6,6}
temp	point	$tmp5	%read{5,5} %write{4,4}
const	float	$const1	1.10000002		%read{5,5} %write{2147483647,-1}
temp	point	$tmp6	%read{6,6} %write{5,5}
temp	float	$tmp7	%read{8,8} %write{7,7}
temp	float	$tmp8	%read{11,11} %write{10,10}
const	float	$const2	0.5		%read{9,9} %write{2147483647,-1}
temp	point	$tmp9	%read{10,10} %write{9,9}
const	float	$const3	2		%read{11,11} %write{2147483647,-1}
temp	float	$tmp10	%read{12,12} %write{11,11}
const	float	$const4	3.14159274		%read{12,12} %write{2147483647,-1}
temp	float	$tmp11	%read{17,17} %write{15,15}
temp	float	$tmp12	%read{17,17} %write{16,16}
temp	float	$tmp13	%read{19,19} %write{18,18}
const	float	$const5	0		%read{21,21} %write{2147483647,-1}
temp	float	$tmp14	%read{21,21} %write{20,20}
code ___main___
# proceduralScratchRandom.osl:11
#     float u_random = u + noise(P * scale) * randomness;
	mul		$tmp2 P scale 	%filename{"proceduralScratchRandom.osl"} %line{11} %argrw{"wrr"}
	noise		$tmp1 $tmp2 	%argrw{"wr"}
	mul		$tmp3 $tmp1 randomness 	%argrw{"wrr"}
	add		u_random u $tmp3 	%argrw{"wrr"}
# proceduralScratchRandom.osl:12
#     float v_random = v + noise(P * scale * 1.1) * randomness;
	mul		$tmp5 P scale 	%line{12} %argrw{"wrr"}
	mul		$tmp6 $tmp5 $const1 	%argrw{"wrr"}
	noise		$tmp4 $tmp6 	%argrw{"wr"}
	mul		$tmp7 $tmp4 randomness 	%argrw{"wrr"}
	add		v_random v $tmp7 	%argrw{"wrr"}
# proceduralScratchRandom.osl:14
#     float angle = noise(P * 0.5) * 2.0 * M_PI;  // Ã¡ngulo aleatorio por punto
	mul		$tmp9 P $const2 	%line{14} %argrw{"wrr"}
	noise		$tmp8 $tmp9 	%argrw{"wr"}
	mul		$tmp10 $tmp8 $const3 	%argrw{"wrr"}
	mul		angle $tmp10 $const4 	%argrw{"wrr"}
# proceduralScratchRandom.osl:15
#     float cosA = cos(angle);
	cos		cosA angle 	%line{15} %argrw{"wr"}
# proceduralScratchRandom.osl:16
#     float sinA = sin(angle);
	sin		sinA angle 	%line{16} %argrw{"wr"}
# proceduralScratchRandom.osl:18
#     float coord = u_random * cosA + v_random * sinA;
	mul		$tmp11 u_random cosA 	%line{18} %argrw{"wrr"}
	mul		$tmp12 v_random sinA 	%argrw{"wrr"}
	add		coord $tmp11 $tmp12 	%argrw{"wrr"}
# proceduralScratchRandom.osl:20
#     float line = sin(coord * scale);
	mul		$tmp13 coord scale 	%line{20} %argrw{"wrr"}
	sin		line $tmp13 	%argrw{"wr"}
# proceduralScratchRandom.osl:21
#     float scratchMask = smoothstep(thickness, 0.0, abs(line));
	abs		$tmp14 line 	%line{21} %argrw{"wr"}
	smoothstep	scratchMask thickness $const5 $tmp14 	%argrw{"wrrr"}
# proceduralScratchRandom.osl:23
#     result = mix(scratchColor, baseColor, scratchMask);
	mix		result scratchColor baseColor scratchMask 	%line{23} %argrw{"wrrr"}
	end
