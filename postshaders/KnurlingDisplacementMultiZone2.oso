OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: 
shader KnurlingDisplacementMultiZone2
param	float	scale	1		%read{55,55} %write{2147483647,-1}
param	float	frequency	20		%read{35,52} %write{2147483647,-1}
param	float	amplitude	1		%read{55,55} %write{2147483647,-1}
param	float	zone1_start	-0.899999976		%read{16,17} %write{2147483647,-1}
param	float	zone1_end	-0.5		%read{18,19} %write{2147483647,-1}
param	float	zone2_start	-0.200000003		%read{22,23} %write{2147483647,-1}
param	float	zone2_end	0.200000003		%read{24,25} %write{2147483647,-1}
param	float	zone3_start	0.5		%read{28,29} %write{2147483647,-1}
param	float	zone3_end	0.899999976		%read{30,31} %write{2147483647,-1}
param	float	angle	45		%read{5,5} %write{2147483647,-1}
oparam	float	resultF	0		%read{2147483647,-1} %write{61,61}
global	point	P	%read{1,1} %write{2147483647,-1}
local	point	pos	%read{2,3} %write{1,1}
local	float	x	%read{7,31} %write{2,2}
local	float	y	%read{9,14} %write{3,3}
local	float	angleRad	%read{6,13} %write{5,5}
local	float	xr	%read{34,51} %write{10,10}
local	float	yr	%read{34,51} %write{15,15}
local	float	fade1	%read{56,56} %write{21,21}
local	float	fade2	%read{57,57} %write{27,27}
local	float	fade3	%read{59,59} %write{33,33}
local	float	pattern1	%read{56,56} %write{40,40}
local	float	pattern2	%read{57,57} %write{47,47}
local	float	pattern3	%read{59,59} %write{54,54}
const	string	$const1	"object"		%read{1,1} %write{2147483647,-1}
const	string	$const2	"transform"		%read{0,0} %write{2147483647,-1}
const	string	$const3	"common"		%read{1,1} %write{2147483647,-1}
const	int	$const4	0		%read{2,2} %write{2147483647,-1}
const	int	$const5	1		%read{3,3} %write{2147483647,-1}
const	string	$const6	"radians"		%read{4,4} %write{2147483647,-1}
const	float	$const7	0.0174532924		%read{5,5} %write{2147483647,-1}
temp	float	$tmp1	%read{7,7} %write{6,6}
temp	float	$tmp2	%read{10,10} %write{7,7}
temp	float	$tmp3	%read{9,9} %write{8,8}
temp	float	$tmp4	%read{10,10} %write{9,9}
temp	float	$tmp5	%read{12,12} %write{11,11}
temp	float	$tmp6	%read{15,15} %write{12,12}
temp	float	$tmp7	%read{14,14} %write{13,13}
temp	float	$tmp8	%read{15,15} %write{14,14}
temp	float	$tmp9	%read{21,21} %write{17,17}
const	float	$const8	0.0500000007		%read{16,30} %write{2147483647,-1}
temp	float	$tmp10	%read{17,17} %write{16,16}
const	float	$const9	1		%read{20,32} %write{2147483647,-1}
temp	float	$tmp11	%read{20,20} %write{19,19}
temp	float	$tmp12	%read{19,19} %write{18,18}
temp	float	$tmp13	%read{21,21} %write{20,20}
temp	float	$tmp14	%read{27,27} %write{23,23}
temp	float	$tmp15	%read{23,23} %write{22,22}
temp	float	$tmp16	%read{26,26} %write{25,25}
temp	float	$tmp17	%read{25,25} %write{24,24}
temp	float	$tmp18	%read{27,27} %write{26,26}
temp	float	$tmp19	%read{33,33} %write{29,29}
temp	float	$tmp20	%read{29,29} %write{28,28}
temp	float	$tmp21	%read{32,32} %write{31,31}
temp	float	$tmp22	%read{31,31} %write{30,30}
temp	float	$tmp23	%read{33,33} %write{32,32}
temp	float	$tmp24	%read{40,40} %write{36,36}
temp	float	$tmp25	%read{35,35} %write{34,34}
temp	float	$tmp26	%read{36,36} %write{35,35}
temp	float	$tmp27	%read{40,40} %write{39,39}
temp	float	$tmp28	%read{38,38} %write{37,37}
temp	float	$tmp29	%read{39,39} %write{38,38}
temp	float	$tmp30	%read{47,47} %write{43,43}
temp	float	$tmp31	%read{42,42} %write{41,41}
temp	float	$tmp32	%read{43,43} %write{42,42}
temp	float	$tmp33	%read{47,47} %write{46,46}
temp	float	$tmp34	%read{45,45} %write{44,44}
temp	float	$tmp35	%read{46,46} %write{45,45}
temp	float	$tmp36	%read{54,54} %write{50,50}
temp	float	$tmp37	%read{49,49} %write{48,48}
temp	float	$tmp38	%read{50,50} %write{49,49}
temp	float	$tmp39	%read{54,54} %write{53,53}
temp	float	$tmp40	%read{52,52} %write{51,51}
temp	float	$tmp41	%read{53,53} %write{52,52}
temp	float	$tmp42	%read{61,61} %write{55,55}
temp	float	$tmp43	%read{58,58} %write{56,56}
temp	float	$tmp44	%read{58,58} %write{57,57}
temp	float	$tmp45	%read{60,60} %write{58,58}
temp	float	$tmp46	%read{60,60} %write{59,59}
temp	float	$tmp47	%read{61,61} %write{60,60}
code ___main___
# KnurlingDisplacementMultiZone2.osl:15
#     point pos = transform("object", P);
	functioncall	$const2 2 	%filename{"KnurlingDisplacementMultiZone2.osl"} %line{15} %argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:263
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	pos $const3 $const1 P 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{263} %argrw{"wrrr"}
# KnurlingDisplacementMultiZone2.osl:16
#     float x = pos[0];
	compref		x pos $const4 	%filename{"KnurlingDisplacementMultiZone2.osl"} %line{16} %argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:17
#     float y = pos[1];
	compref		y pos $const5 	%line{17} %argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:19
#     float angleRad = radians(angle);
	functioncall	$const6 6 	%line{19} %argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		angleRad angle $const7 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{65} %argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:20
#     float xr = cos(angleRad) * x - sin(angleRad) * y;
	cos		$tmp1 angleRad 	%filename{"KnurlingDisplacementMultiZone2.osl"} %line{20} %argrw{"wr"}
	mul		$tmp2 $tmp1 x 	%argrw{"wrr"}
	sin		$tmp3 angleRad 	%argrw{"wr"}
	mul		$tmp4 $tmp3 y 	%argrw{"wrr"}
	sub		xr $tmp2 $tmp4 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:21
#     float yr = sin(angleRad) * x + cos(angleRad) * y;
	sin		$tmp5 angleRad 	%line{21} %argrw{"wr"}
	mul		$tmp6 $tmp5 x 	%argrw{"wrr"}
	cos		$tmp7 angleRad 	%argrw{"wr"}
	mul		$tmp8 $tmp7 y 	%argrw{"wrr"}
	add		yr $tmp6 $tmp8 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:23
#     float fade1 = smoothstep(zone1_start, zone1_start + 0.05, x) * (1.0 - smoothstep(zone1_end - 0.05, zone1_end, x));
	add		$tmp10 zone1_start $const8 	%line{23} %argrw{"wrr"}
	smoothstep	$tmp9 zone1_start $tmp10 x 	%argrw{"wrrr"}
	sub		$tmp12 zone1_end $const8 	%argrw{"wrr"}
	smoothstep	$tmp11 $tmp12 zone1_end x 	%argrw{"wrrr"}
	sub		$tmp13 $const9 $tmp11 	%argrw{"wrr"}
	mul		fade1 $tmp9 $tmp13 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:24
#     float fade2 = smoothstep(zone2_start, zone2_start + 0.05, x) * (1.0 - smoothstep(zone2_end - 0.05, zone2_end, x));
	add		$tmp15 zone2_start $const8 	%line{24} %argrw{"wrr"}
	smoothstep	$tmp14 zone2_start $tmp15 x 	%argrw{"wrrr"}
	sub		$tmp17 zone2_end $const8 	%argrw{"wrr"}
	smoothstep	$tmp16 $tmp17 zone2_end x 	%argrw{"wrrr"}
	sub		$tmp18 $const9 $tmp16 	%argrw{"wrr"}
	mul		fade2 $tmp14 $tmp18 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:25
#     float fade3 = smoothstep(zone3_start, zone3_start + 0.05, x) * (1.0 - smoothstep(zone3_end - 0.05, zone3_end, x));
	add		$tmp20 zone3_start $const8 	%line{25} %argrw{"wrr"}
	smoothstep	$tmp19 zone3_start $tmp20 x 	%argrw{"wrrr"}
	sub		$tmp22 zone3_end $const8 	%argrw{"wrr"}
	smoothstep	$tmp21 $tmp22 zone3_end x 	%argrw{"wrrr"}
	sub		$tmp23 $const9 $tmp21 	%argrw{"wrr"}
	mul		fade3 $tmp19 $tmp23 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:27
#     float pattern1 = sin((xr + yr) * frequency) * sin((xr - yr) * frequency);
	add		$tmp25 xr yr 	%line{27} %argrw{"wrr"}
	mul		$tmp26 $tmp25 frequency 	%argrw{"wrr"}
	sin		$tmp24 $tmp26 	%argrw{"wr"}
	sub		$tmp28 xr yr 	%argrw{"wrr"}
	mul		$tmp29 $tmp28 frequency 	%argrw{"wrr"}
	sin		$tmp27 $tmp29 	%argrw{"wr"}
	mul		pattern1 $tmp24 $tmp27 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:28
#     float pattern2 = cos((xr + yr) * frequency) * cos((xr - yr) * frequency);
	add		$tmp31 xr yr 	%line{28} %argrw{"wrr"}
	mul		$tmp32 $tmp31 frequency 	%argrw{"wrr"}
	cos		$tmp30 $tmp32 	%argrw{"wr"}
	sub		$tmp34 xr yr 	%argrw{"wrr"}
	mul		$tmp35 $tmp34 frequency 	%argrw{"wrr"}
	cos		$tmp33 $tmp35 	%argrw{"wr"}
	mul		pattern2 $tmp30 $tmp33 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:29
#     float pattern3 = sin((xr - yr) * frequency) * cos((xr + yr) * frequency);
	sub		$tmp37 xr yr 	%line{29} %argrw{"wrr"}
	mul		$tmp38 $tmp37 frequency 	%argrw{"wrr"}
	sin		$tmp36 $tmp38 	%argrw{"wr"}
	add		$tmp40 xr yr 	%argrw{"wrr"}
	mul		$tmp41 $tmp40 frequency 	%argrw{"wrr"}
	cos		$tmp39 $tmp41 	%argrw{"wr"}
	mul		pattern3 $tmp36 $tmp39 	%argrw{"wrr"}
# KnurlingDisplacementMultiZone2.osl:31
#     resultF = amplitude * scale * (pattern1 * fade1 + pattern2 * fade2 + pattern3 * fade3);
	mul		$tmp42 amplitude scale 	%line{31} %argrw{"wrr"}
	mul		$tmp43 pattern1 fade1 	%argrw{"wrr"}
	mul		$tmp44 pattern2 fade2 	%argrw{"wrr"}
	add		$tmp45 $tmp43 $tmp44 	%argrw{"wrr"}
	mul		$tmp46 pattern3 fade3 	%argrw{"wrr"}
	add		$tmp47 $tmp45 $tmp46 	%argrw{"wrr"}
	mul		resultF $tmp42 $tmp47 	%argrw{"wrr"}
	end
